#main.py
import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, JobQueue,
    MessageHandler, filters, ContextTypes, ConversationHandler
)
from alerts_manager import save_alert, load_alerts
import asyncio
from binance_api import get_current_price
from alerts_manager import load_alerts, save_alerts, save_alert
import uuid
import json


# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π ===
MAIN_MENU, SELECT_PAIR, SET_VALUE, CONFIRM = range(4)

# === –¢–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ===
MAIN_MENU_BTNS = [
    "‚ûï –ù–æ–≤—ã–π –∞–ª–µ—Ä—Ç",
    "üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã",
    "üíπ –¶–µ–Ω—ã"
]


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE, text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"main_menu|{i}")]
        for i, name in enumerate(MAIN_MENU_BTNS)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(text, reply_markup=reply_markup)
    return MAIN_MENU

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/show_alerts - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∞–ª–µ—Ä—Ç—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–¢–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤:</b>
üí∞ –¶–µ–Ω–∞ –≤—ã—à–µ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
üí∞ –¶–µ–Ω–∞ –Ω–∏–∂–µ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ —É–ø–∞–¥—ë—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ % (—Ä–æ—Å—Ç) - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ä–æ—Å—Ç–µ –Ω–∞ N%
üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ % (–ø–∞–¥–µ–Ω–∏–µ) - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –Ω–∞ N%

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
- BTC –≤—ã—à–µ $70,000
- ETH –Ω–∏–∂–µ $3,000
- SOL —Ä–æ—Å—Ç –Ω–∞ +5%
- BNB –ø–∞–¥–µ–Ω–∏–µ –Ω–∞ -3%
"""
    await update.message.reply_text(help_text, parse_mode="HTML")

SELECT_PAIR_STATE = 1

async def back_to_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"main_menu|{i}")]
        for i, name in enumerate(MAIN_MENU_BTNS)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return MAIN_MENU

async def select_pair(update: Update, context: ContextTypes.DEFAULT_TYPE, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:"):
    pairs = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "BNBUSDT", "XRPUSDT", "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–∞—Ä—É"]

    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"pair|{name}")]
        for name in pairs
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=reply_markup)

    return SELECT_PAIR_STATE

async def set_value_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    value_text = update.message.text.strip()

    try:
        value = float(value_text)
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 68000")
        return SET_VALUE

    alert_type = context.user_data.get("alert_type")
    if not alert_type:
        await update.message.reply_text(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞: üí∞ –¶–µ–Ω–∞ –≤—ã—à–µ, üí∞ –¶–µ–Ω–∞ –Ω–∏–∂–µ –∏–ª–∏ üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ %"
        )
        return MAIN_MENU

    # –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
    if alert_type in ("percent_up", "percent_down"):
        if value <= 0 or value > 100:
            await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100")
            return SET_VALUE

    # –î–ª—è —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
    if alert_type in ("above", "below"):
        if value <= 0:
            await update.message.reply_text("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return SET_VALUE

    pair = context.user_data.get("pair")
    current_price = context.user_data.get("current_price")

    alert_data = {
        "id": str(uuid.uuid4()),
        "user_id": update.effective_user.id,
        "pair": pair,
        "alert_type": alert_type,
        "target_value": value,
        "initial_price": current_price
    }

    try:
        save_alert(alert_data)
        logger.info(f"–ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω: user={update.effective_user.id}, pair={pair}, type={alert_type}")

        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        ]])

        await update.message.reply_text(
            f"‚úÖ –ê–ª–µ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n"
            f"–ü–∞—Ä–∞: {pair}\n"
            f"–¢–∏–ø: {alert_type}\n"
            f"–¶–µ–ª—å: {value}",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")

        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        ]])

        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboard
        )

    return MAIN_MENU

async def pair_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    pair = query.data.split("|")[1]

    if pair == "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–∞—Ä—É":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: ADAUSDT, DOGEUSDT):\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã: /cancel")
        return SELECT_PAIR

    else:
        from binance_api import get_current_price
        price_data = get_current_price(pair)
        if not price_data["success"]:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return SELECT_PAIR
        info = price_data["data"]
        context.user_data["pair"] = pair
        context.user_data["current_price"] = float(info["last_price"])
        price = float(info["last_price"])
        change_24h = float(info["price_change_percent"])
        sign = "+" if change_24h >= 0 else ""
        change_text = f"{sign}{change_24h:.2f}%"

        keyboard = [
            [InlineKeyboardButton("üí∞ –¶–µ–Ω–∞ –≤—ã—à–µ", callback_data="alert_type|above")],
            [InlineKeyboardButton("üí∞ –¶–µ–Ω–∞ –Ω–∏–∂–µ", callback_data="alert_type|below")],
            [InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ % (—Ä–æ—Å—Ç)", callback_data="alert_type|percent_up")],
            [InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ % (–ø–∞–¥–µ–Ω–∏–µ)", callback_data="alert_type|percent_down")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {pair}\n\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${price:,.2f}\n"
            f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {change_24h:+.2f}%\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞:"
        )
        await query.edit_message_text(text, reply_markup=reply_markup)
        return SET_VALUE

async def custom_pair_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pair = update.message.text.strip().upper()
    from binance_api import get_current_price
    price_data = get_current_price(pair)
    if not price_data["success"]:
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –ø–∞—Ä—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return SELECT_PAIR

    info = price_data["data"]
    context.user_data["pair"] = pair
    context.user_data["current_price"] = float(info["last_price"])
    price = float(info["last_price"])
    change_24h = float(info["price_change_percent"])
    sign = "+" if change_24h >= 0 else ""
    change_text = f"{sign}{change_24h:.2f}%"

    keyboard = [
        [InlineKeyboardButton("üí∞ –¶–µ–Ω–∞ –≤—ã—à–µ", callback_data="alert_type|above")],
        [InlineKeyboardButton("üí∞ –¶–µ–Ω–∞ –Ω–∏–∂–µ", callback_data="alert_type|below")],
        [InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ % (—Ä–æ—Å—Ç)", callback_data="alert_type|percent_up")],
        [InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ % (–ø–∞–¥–µ–Ω–∏–µ)", callback_data="alert_type|percent_down")],

    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {pair}\n\n"
        f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${price:,.2f}\n"
        f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {change_24h:+.2f}%\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞:"
    )
    await update.message.reply_text(text, reply_markup=reply_markup)
    return SET_VALUE

async def alert_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    logger.info("ALERT_TYPE_HANDLER called, data=%s", query.data)

    alert_type = query.data.split("|")[1]
    context.user_data["alert_type"] = alert_type

    # üéØ –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö ‚Äî –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    if alert_type in ("percent_up", "percent_down"):
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3.5"
        )
        return SET_VALUE

    # üí∞ –ï—Å–ª–∏ –∞–ª–µ—Ä—Ç –ø–æ —Ü–µ–Ω–µ ‚Äî –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
    await query.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∞–ª–µ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70000):"
    )
    return SET_VALUE

async def delete_alert_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    index = int(query.data.split("|")[1])

    alerts = load_alerts()
    user_id = update.effective_user.id
    user_alerts = [a for a in alerts if a["user_id"] == user_id]

    if index < 0 or index >= len(user_alerts):
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ ‚Äî —Ç–∞–∫–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –Ω–µ—Ç.")
        return

    alert_to_remove = user_alerts[index]
    alerts.remove(alert_to_remove)
    save_alerts(alerts)

    await query.edit_message_text("‚úÖ –ê–ª–µ—Ä—Ç —É–¥–∞–ª—ë–Ω!")

def format_alert_text(alert):
    pair = alert.get("pair", "???")
    atype = alert.get("alert_type", "unknown")
    value = alert.get("target_value", "")

    if atype == "below":
        condition = f"üìâ –¶–µ–Ω–∞ –Ω–∏–∂–µ: {value}"
    elif atype == "above":
        condition = f"üöÄ –¶–µ–Ω–∞ –≤—ã—à–µ: {value}"
    elif atype == "percent_up":
        condition = f"üìà –†–æ—Å—Ç: +{value}%"
    elif atype == "percent_down":
        condition = f"üìâ –ü–∞–¥–µ–Ω–∏–µ: -{value}%"
    else:
        condition = f"üßê –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: {value}"

    return f"üîî {pair}\n{condition}"

async def show_alerts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    alerts = load_alerts()

    if not alerts:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ üôÇ")
        return

    for alert in alerts:
        text = format_alert_text(alert)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{alert['id']}")]
        ])
        await update.message.reply_text(text, reply_markup=keyboard)

async def delete_alert_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    alert_id = query.data.replace("del_", "")

    alerts = load_alerts()
    alerts = [a for a in alerts if a.get("id") != alert_id]
    save_alerts(alerts)

    await query.edit_message_text("‚úÖ –ê–ª–µ—Ä—Ç —É–¥–∞–ª—ë–Ω")

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    choice = int(data.split("|")[1])

    if choice == 0:
        return await select_pair(update, context)

    elif choice == 1:
        alerts = load_alerts()
        user_alerts = [a for a in alerts if a["user_id"] == update.effective_user.id]
        if not user_alerts:
            await query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ üòå")
            return ConversationHandler.END
        await query.edit_message_text("üìã <b>–í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã:</b>", parse_mode="HTML")
        for i, alert in enumerate(user_alerts):
            pair = alert["pair"]
            alert_type = alert.get("alert_type", "")
            value = alert.get("target_value", "?")
            if alert_type == "above":
                alert_title = "üöÄ –¶–µ–Ω–∞ –≤—ã—à–µ"
            elif alert_type == "below":
                alert_title = "üìâ –¶–µ–Ω–∞ –Ω–∏–∂–µ"
            elif alert_type == "percent_up":
                alert_title = "üìà –†–æ—Å—Ç"
                value = f"+{value}%"
            elif alert_type == "percent_down":
                alert_title = "üìâ –ü–∞–¥–µ–Ω–∏–µ"
                value = f"-{value}%"
            else:
                alert_title = "üßê –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
            text = f"üîî <b>{pair}</b>\n{alert_title}: <b>{value}</b>"
            keyboard_single = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{alert['id']}")
            ]])
            await query.message.reply_text(text, reply_markup=keyboard_single, parse_mode="HTML")
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        ]])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        return ConversationHandler.END

    elif choice == 2:
        pairs = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "BNBUSDT", "XRPUSDT"]
        await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ü–µ–Ω—ã...")
        text_lines = ["üíπ <b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:</b>\n"]
        for pair in pairs:
            price_data = get_current_price(pair)
            if price_data["success"]:
                info = price_data["data"]
                price = float(info["last_price"])
                change_24h = float(info["price_change_percent"])
                emoji = "üü¢" if change_24h >= 0 else "üî¥"
                sign = "+" if change_24h >= 0 else ""
                text_lines.append(
                    f"{emoji} <b>{pair.replace('USDT', '')}</b>: ${price:,.2f} "
                    f"({sign}{change_24h:.2f}%)"
                )

        await query.message.reply_text("\n".join(text_lines), parse_mode="HTML")
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        ]])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        return ConversationHandler.END

logger = logging.getLogger(__name__)
async def check_single_alert(alert, app):
    pair = alert["pair"]
    alert_type = alert["alert_type"]
    target_value = float(alert["target_value"])
    user_id = alert["user_id"]

    price_data = get_current_price(pair)
    if not price_data["success"]:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {pair}")
        return

    current_price = float(price_data["data"]["last_price"])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    triggered = False
    if alert_type == "above" and current_price >= target_value:
        message = f"üöÄ {pair} –¥–æ—Å—Ç–∏–≥ —Ü–µ–Ω—ã {current_price:.2f} (–≤—ã—à–µ {target_value})"
        triggered = True
    elif alert_type == "below" and current_price <= target_value:
        message = f"üìâ {pair} —É–ø–∞–ª –¥–æ {current_price:.2f} (–Ω–∏–∂–µ {target_value})"
        triggered = True
    elif alert_type in ("percent_up", "percent_down"):
        initial = float(alert["initial_price"])
        percent_target = float(alert["target_value"])
        change_now = (current_price - initial) / initial * 100

        if alert_type == "percent_up" and change_now >= percent_target:
            message = f"üìà {pair} –≤—ã—Ä–æ—Å –Ω–∞ {change_now:.2f}%!"
            triggered = True
        elif alert_type == "percent_down" and change_now <= -percent_target:
            message = f"üìâ {pair} —É–ø–∞–ª –Ω–∞ {change_now:.2f}%!"
            triggered = True

    if not triggered:
        return

    try:
        await app.bot.send_message(chat_id=user_id, text=message)

        alerts = load_alerts()
        alerts = [a for a in alerts if not (
            a["user_id"] == user_id and
            a["pair"] == pair and
            a["alert_type"] == alert_type and
            float(a["target_value"]) == target_value and
            float(a.get("initial_price", initial)) == initial
        )]
        save_alerts(alerts)

        logger.info(f"–ê–ª–µ—Ä—Ç —É–¥–∞–ª—ë–Ω: {pair} {alert_type} {target_value}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def check_alerts_task(app):
    logger.info("–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")

    alerts = load_alerts()

    alerts = [a for a in alerts if a.get("alert_type") in ("above", "below", "percent_up", "percent_down")]

    for alert in alerts:
        asyncio.create_task(check_single_alert(alert, app))

def main():
    async def post_init(app):
        logger.info("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ check_alerts_task...")
        if app.job_queue is None:
            app.job_queue = JobQueue()
        app.job_queue.set_application(app)

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        app.job_queue.run_repeating(
            lambda _: asyncio.create_task(check_alerts_task(app)),
            interval=300,
            first=10
        )
        logger.info("‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ check_alerts_task –∑–∞–ø—É—â–µ–Ω–∞")

    app = Application.builder().token(BOT_TOKEN).build()
    app.post_init = post_init

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={
            MAIN_MENU: [CallbackQueryHandler(menu_handler, pattern="^main_menu")],
            SELECT_PAIR: [
                CallbackQueryHandler(pair_handler, pattern="^pair"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, custom_pair_handler),
            ],
            SET_VALUE: [
                CallbackQueryHandler(alert_type_handler, pattern="^alert_type\\|"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_value_handler),
            ],
        },
        fallbacks=[],
        allow_reentry=True
    )
    # ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚Äî –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    app.add_handler(CallbackQueryHandler(back_to_menu_handler, pattern="^back_to_menu$"))

    app.add_handler(CommandHandler("show_alerts", show_alerts_handler))

    app.add_handler(CommandHandler("help", help_command))

    # ‚úÖ Callback —É–¥–∞–ª–µ–Ω–∏—è ‚Äî —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    app.add_handler(CallbackQueryHandler(delete_alert_callback, pattern="^del_"))

    app.add_handler(conv_handler)
    logger.info("üöÄ Bot started!")
    app.run_polling()




if __name__ == "__main__":
    main()




